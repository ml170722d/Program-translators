1. niz = new bool[8]; 
   elementima niza se dodele bool vrednosti i npr. za 
   true false true false false true false true da ispise 165 
   1    0     1    0     0     1    0     1

2. niz@1514756673----> ZIZA, "niz" je niz od 4 karaktera 
   1296124481->MAJA 
   1514756673->ZIZA 
   1296124481 - 32b int koji se dodeljuje u elemente niza i ispisuje se od niz[0] do niz[3], na kraju treba da se dobije "ZIZA" ili "MAJA", sa siftovanjem se radi

//3. niz@1 = niz[1] + niz[5-1]; gde je 5 arraylength, ova jedinica je NUMBER nije Expr

4. #niz[2] => broj pristupa elementu niza 
   npr. 
   niz[2] = 2;
   niz[1] = niz[2];
   print(#niz[2]); ----> treba da ispise 2

//5. niz['a','b','c'] i kad se pozove niz[5]@4 => niz[(5+4)%arraylength]

6. Cezarov algoritam - svako slovo menja sa odg. slovom pomerenim za dati broj npr.

7. niz @ - da se ispise max niza -> mislim da je ovo za B modif ipak

//8. niz[1,2] - swap-uje niz[1] sa niz[2]

9. dodati final ispred deklaracije niza i omoguciti da se elementima tog niza samo jednom moze dodeliti vrednost - januar 2021 RTI

//10. x@y -> x^2 + 2*x*y + y^2

11. januar 2021 SI - goto i labela, moze da se skoci unapred i unazad u main-u - Januar 2021 SI/Februar 2020





3. zad
a = niz@1; // a <= niz[1] + niz[5-1]

//niz index <= dup2
//niz index niz index <= load niz
//niz index niz index niz <= arraylength
//niz index niz index arraylength <= dup_x1
//niz index niz arraylength index arraylength <= pop
//niz index niz arraylength index <= add
//niz index niz arraylength+index <= aload
//niz index niz[arraylength+index] <= dup_x2
//niz[arraylength+index] niz index niz[arraylength+index] <= pop
//niz[arraylength+index] niz index <= aload
//niz[arraylength+index] niz[index] <= add
//niz[arraylength+index]+niz[index] <= add

5. zad
a = niz[5]@4; // a <= niz[(5+4)%arraylength]

//niz index offset <= add
//niz index+offset <= load niz
//niz index+offset niz <= arraylength
//niz index+offset arraylength <= mod
//niz (index+offset)%arraylength <=  aload
//niz[index+offset%arraylength]

7. zad
/// niz = new int[3];	-> zauzemi 3 + 1 mesta
niz[0] = 5
niz[1] = 2
niz[2] = 6

a = niz @; //a <= max(niz) 

//niz

8. zad
niz[3,4];	//swap niz[3] & niz[4]

//niz index1 index2 <= dup2
//niz index1 index2 index1 index2 <= load niz
//niz index1 index2 index1 index2 niz <= dup_x2
//niz index1 index2 niz index1 index2 niz <= dup_x1
//niz index1 index2 niz index1 niz index2 <= pop
//niz index1 index2 niz index1 niz index2 <= aload
//niz index1 index2 niz index1 niz[index2] => store tmp			->	tmp = niz[index2]
//niz index1 index2 niz index1 <= dup_x1 
//niz index1 index2 index1 niz index1 <= pop 
//niz index1 index2 index1 niz <= dup_x2
//niz index1 niz index2 index1 niz <= dup_x1
//niz index1 niz index2 niz index1 niz <= pop
//niz index1 niz index2 niz index1 <= aload
//niz index1 niz index2 niz[index1] <= astore					->	niz[index2] = niz[index1]
//niz index1 <= load tmp
//niz index1 tmp <= astore										->	niz[index1] = tmp

9. zad 

niz[1, 0, 0] 1 0 0


10. zad 
a = x@y; // a <= x^2 + 2*x*y + y^2

// x y <= dup2
// x y x y <= mul
// x y x*y <= dup
// x y x*y x*y <= add
// x y x*y+x*y <= dup_x2
// x*y+x*y x y x*y+x*y <= pop
// x*y+x*y x y <= dup
// x*y+x*y x y y <= mul
// x*y+x*y x y*y <= dup_x1
// x*y+x*y y*y x y*y <= pop
// x*y+x*y y*y x <= dup
// x*y+x*y y*y x x <= mul
// x*y+x*y y*y x*x <= add 
// x*y+x*y (y*y)+(x*x) <= add 
// (x*y+x*y)+(y*y)+(x*x) <= add


(a-b)^2 = a^2 - 2*a*b + b^2 <=> a^2 + b^2 - 2*a*b
// x y <= dup2
// x y x y <= mul
// x y x*y <= dup
// x y x*y x*y <= add
// x y x*y+x*y <= dup_x2
// x*y+x*y x y x*y+x*y <= pop
// x*y+x*y x y <= dup
// x*y+x*y x y y <= mul
// x*y+x*y x y*y <= dup_x1
// x*y+x*y y*y x y*y <= pop
// x*y+x*y y*y x <= dup
// x*y+x*y y*y x x <= mul
// x*y+x*y y*y x*x <= add
// x*y+x*y y*y+x*x <= dup_x1
// y*y+x*x x*y+x*y y*y+x*x <= dup_x1
// y*y+x*x x*y+x*y y*y+x*x <= pop
// y*y+x*x x*y+x*y <= sub
// (y*y+x*x)-(x*y+x*y)

//x*x+2*x*y+y*y























//niz niz
//niz arraylength
//niz arraylength 1
//niz arraylength-1
//niz [arraylength-1]

//niz index val
	Code.put(Code.dup);
//niz index val val
	Code.load(obj);
//niz index val val desObj
	Code.load(obj);
	Code.put(Code.arraylength);
//niz index val val desObj length
	Code.loadConst(1);
//niz index val val desObj length 1
	Code.put(Code.sub);
//niz index val val desObj length-1
	Code.put(Code.aload);
//niz index val val desObj[length-1]   -> val > niz[i]
	Code.put(Code.jcc + Code.le);
	tmpAdr = Code.pc;
	Code.put2(0);
//niz index val
	Code.put(Code.dup);
//niz index val val
	Code.load(obj);
//niz index val val desObj
	Code.load(obj);
	Code.put(Code.arraylength);
//niz index val val desObj length
	Code.loadConst(1);
//niz index val val desObj length 1
	Code.put(Code.sub);
//niz index val val desObj length-1
	swap1_3();
//niz index val length-1 val desObj 
	swap1_3();
//niz index val desObj length-1 val 
	Code.put(Code.astore);
	Code.fixup(tmpAddr);
	Code.put(Code.astore);






